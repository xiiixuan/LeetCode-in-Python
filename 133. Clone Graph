# 2016-07-16
/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if (node == null) {
            return node;
        }
        //BFS
        ArrayList<UndirectedGraphNode> nodes = BFS(node);
        
        // copy nodes, store the old->new mapping information in a hash map
        HashMap<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>();
        for (UndirectedGraphNode n: nodes) {
            map.put(n, new UndirectedGraphNode(n.label));
        }
        
        // copy neighbors
        for (UndirectedGraphNode n: nodes) {
            UndirectedGraphNode newNode = map.get(n);
            for (UndirectedGraphNode neighbor: n.neighbors) {
                UndirectedGraphNode newNeighbor = map.get(neighbor);
                newNode.neighbors.add(newNeighbor);
            }
        }
        return map.get(node);
        
    }
    public ArrayList<UndirectedGraphNode> BFS(UndirectedGraphNode node) {
        ArrayList<UndirectedGraphNode> nodes = new ArrayList<>();
        HashSet<UndirectedGraphNode> set = new HashSet<>();
        Queue<UndirectedGraphNode> q = new LinkedList<>();
        
        q.offer(node);
        set.add(node);
        while (!q.isEmpty()) {
            UndirectedGraphNode newNode = q.poll();
            for (UndirectedGraphNode neighbor: newNode.neighbors) {
                if (!set.contains(neighbor)) {
                    set.add(neighbor);
                    q.offer(neighbor);
                }
            }
        }
        nodes = new ArrayList<UndirectedGraphNode>(set);
        return nodes;
    }
}
