# 2016-11-05
public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        // Write your code here
        List<String> result = new ArrayList<>();
        if (s.length() == 0) {
            return result;
        }
        
        int maxlength = maxLength(wordDict);
        //此时dp[i]表示 s的第 i-1 位之后部分可不可以word break
        //为了helper 第一步判断一波，要不然复杂度太高！
        boolean[] dp = new boolean[s.length() + 1];
        dp[s.length()] = true;
        for (int i = s.length() - 1; i >= 0; i--) {
            for (int j = i; j < s.length(); j++) {
                if (wordDict.contains(s.substring(i, j + 1)) && dp[j + 1]) {
                    dp[i] = true;
                    break;
                }
            }
        }
        ArrayList<String> list = new ArrayList<>();
        helper(s, wordDict, 0, list, result, maxlength, dp);
        return result;
    }
    public void helper (String s, Set<String> wordDict, int index, ArrayList<String> list, List<String> result, int maxlength, boolean[] dp) {
        if (!dp[index]) return;
        if (index == s.length()) {
            StringBuilder sb = new StringBuilder();
            for (String item: list) {
                sb.append(item);
                sb.append(" ");
            }
            sb.deleteCharAt(sb.length() - 1);
            result.add(sb.toString());
            return;
        }
        for (int i = index; i < s.length() && ((i + 1) - index) <= maxlength; i++) {
            if (wordDict.contains(s.substring(index, i + 1))) {
                list.add(s.substring(index, i + 1));
                helper(s, wordDict, i + 1, list, result, maxlength, dp);
                list.remove(list.size() - 1);
            }
        }
    }
    public int maxLength(Set<String> wordDict) {
        int max = Integer.MIN_VALUE;
        for (String item: wordDict) {
            max = Math.max(max, item.length());
        }
        return max;
    }
}
