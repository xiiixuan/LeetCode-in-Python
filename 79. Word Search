# 2016-09-10
public class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0) {
            return false;
        }
        if (word.length() == 0) {
            return true;
        }
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if(board[i][j] == word.charAt(0)) {
                    boolean[][] visited = new boolean[m][n];
                    boolean result = find(board, i, j, word, 0, visited);
                    if(result){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    public boolean find(char[][] board, int x, int y, String word, int index,
                        boolean[][] visited) {
        if (index == word.length()) {
            return true;
        }                
        if(x < 0 || x >= board.length || y < 0 || y >= board[0].length 
                || visited[x][y] == true || board[x][y] != word.charAt(index)) {
            return false;
        }
        
        visited[x][y] = true;
        boolean result = 
        find(board, x - 1, y, word, index + 1, visited) ||
        find(board, x + 1, y, word, index + 1, visited) ||
        find(board, x, y - 1, word, index + 1, visited) ||
        find(board, x, y + 1, word, index + 1, visited);
        visited[x][y] = false;
        return result;
    }
}
