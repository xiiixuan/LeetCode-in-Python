# 2016-08-25
public class Solution {
    public String getPermutation(int n, int k) {
        //以 n = 4, k = 13 为例
        //先创建元素 result = [1,2,3,4]
        ArrayList<Integer> nums = new ArrayList<>();
        StringBuilder result = new StringBuilder();
        for (int i = 1; i <= n; i++) {
            nums.add(i);
        }
        //第一个因子应该是 n-1 = 3 后三位的阶乘：3！
        int factorial = 1;
        for (int i = 2; i < n; i++) {
            factorial = factorial * i;
        }
        //为了元素与坐标相一致， k=1 其实是第零个组合；
        k--;
        int round = n-1; //目前算的是后 n-1为的，之后要不断的减1，求下一位
        while (round > 0) {
            int index = k / factorial;
            k = k % factorial;
            result.append(nums.get(index));
            nums.remove(nums.get(index));
            //最左边的一位算完了，接着看第二位，
            //所以阶乘因子要除以当前的round，从 3*2*1 变成 2*1
            factorial = factorial / round; 
            round--;
        }
        result.append(nums.get(0));
        return result.toString();
    }
}
