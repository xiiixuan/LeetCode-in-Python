# 2016-04-28
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    //public ListNode mergeKLists(ListNode[] lists) {
    //Priority Queueï¼šheap
    private Comparator<ListNode> mergeComparator = new Comparator<ListNode>() {
            public int compare (ListNode left, ListNode right) {
                if (left == null) {
                    return 1;
                }else if (right == null) {
                    return -1;
                }
                return left.val - right.val;
            }
    };
    public ListNode mergeKLists(ListNode[] lists) { 
        if (lists == null || lists.length == 0) {
            return null;
        }
        Queue<ListNode> heap = new PriorityQueue<ListNode>(lists.length,mergeComparator);
        for (int i=0; i< lists.length; i++) {
            if (lists[i] != null) {
                heap.add(lists[i]);
            }
        }
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        while(!heap.isEmpty() ) {
            ListNode head = heap.poll();
            cur.next = head;
            cur = cur.next;
            if (head.next != null) {
                heap.add(head.next);
            }
        }
        return dummy.next;
        
    }
}
     
     
     
     
     
//  //Divide_conquer 
    // public ListNode mergeKLists(List<ListNode> lists) {  
    //     // write your code here
    //     if (lists.size()==0) {
    //         return null;
    //     }
    //     int k = lists.size();
    //     return mergeHelper(lists, 0, k-1);
    // }
    // private ListNode mergeHelper(List<ListNode> lists, int start, int end) {
    //     if (start == end) {
    //         return lists.get(start);
    //     }
    //     int mid = start + (end - start)/2;
    //     ListNode left = mergeHelper (lists, start, mid);
    //     ListNode right = mergeHelper (lists, mid+1, end);
    //     return mergeTwoLists(left,right);
    // }
    // private ListNode mergeTwoLists (ListNode list1, ListNode list2) {
    //     ListNode dummy = new ListNode(0);
    //     ListNode cur = dummy;
    //     while (list1 != null && list2 !=null) {
    //         if (list1.val < list2.val) {
    //             cur.next = list1;
    //             list1 =  list1.next;
    //         }else {
    //             cur.next = list2;
    //             list2 = list2.next; 
    //         }
    //         cur =cur.next;
    //     }
    //     if (list1 != null) {
    //         cur.next = list1;
    //     }else {
    //         cur.next = list2;
    //     }
    //     return dummy.next;
    // }
    //}
