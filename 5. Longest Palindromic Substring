# 2016-09-23
public class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return "";
        }
        int maxLen = 0;
        String result = "";
        //中心的个数为2*n-1(字符作为中心有n个，间隙有n-1个）
        for (int i = 0; i < 2 * s.length() - 1; i++) {
            int left = i / 2; //中心开始左右在s的起点
            int right = i / 2;
            if (i % 2 == 1) { //此时分界线是个缝而不是数，对称为偶数个
                right++;
            }
            String str = lenPalindrome(s, left, right);
            if (str.length() > maxLen) {
                maxLen = str.length();
                result = str;
            }
        }
        return result;
    }
    public String lenPalindrome(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left --;
            right++;
        }
        return s.substring(left + 1, right);
    }
}
