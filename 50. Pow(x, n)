# 2016-02-28  Runtime: 56 ms
# Binary rearch
class Solution(object):
    def myPow(self, x, n):
        """
        :type x: float
        :type n: int
        :rtype: float
        """
        if n==0:
            return 1
        if n < 0:
            return 1 / self.myPow_help(x, -n)
        return self.myPow_help(x, n)
        
    def myPow_help(self,x,n):
        if n==2:
            return x*x
        if n==1:
            return x
        if n%2==1:
            return self.myPow_help(x*x,n/2)*x
        return self.myPow_help(x*x,n/2)

//java vision
public class Solution {
    public double myPow(double x, int n) {
        if(n<0){  
            return 1.0/power(x, -n);  
        }else {  
            return power(x, n);  
        }  
    }  
    public double power(double x,int n) {
        if (n == 0) {
            return 1;
        }
        if (n == 1 ) {
            return x;
        }
        
        double v = power(x, n/2);  
        if (n % 2 == 0) {
            return v * v;
        }else {
            return v * v * x;
        }
    }
}
