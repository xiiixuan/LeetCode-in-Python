# 2016-07-19
public class Solution {
    public List<List<String>> findLadders(String start, String end, Set<String> dict) {
        //map:表示每个顶点，对应它周围的点有哪些
        //distance:表示这个点，到start走几步，start初始化为1;
        HashMap<String, List<String>> map = new HashMap<>();
        HashMap<String, Integer> distance = new HashMap<>();
        dict.add(start);
        dict.add(end);
        distance.put(start, 1);
        
        bfs(start, end ,dict, map, distance);
        
        List<List<String>> result = new ArrayList<>();
        List<String> list = new ArrayList<>(); 
        dfs(end, start, map, distance, result, list);
        
        return result;
    }
    private void dfs (String current, String start,
        HashMap<String, List<String>> map, HashMap<String, Integer> distance,
        List<List<String>> result, List<String> list) {
        
        list.add(current);
        if (current.equals(start)) {
            Collections.reverse(list);
            result.add(new ArrayList<String>(list));
            Collections.reverse(list);
        }else {
            for (String item: map.get(current)) {
                if (distance.containsKey(item) && distance.get(item) + 1 ==distance.get(current)) {
                    dfs(item, start, map, distance, result, list);
                }
            }
        }
        list.remove(list.size() - 1);
    }
    private void bfs (String start, String end, Set<String> dict, 
        HashMap<String, List<String>> map, HashMap<String, Integer> distance){
        Queue<String> q =  new LinkedList<>();
        q.offer(start);
        
        for (String s : dict) {
            map.put(s, new ArrayList<String>());
        }
        while (!q.isEmpty()) {
            String cur = q.poll();
            List<String> nextWord = nextWord(cur, dict);
            for (String item: nextWord) {
                map.get(item).add(cur);
                if (!distance.containsKey(item)) {
                    distance.put(item, distance.get(cur) + 1);
                    q.offer(item);
                }
            }
        }
    }
    //bfs中 找寻一个单词在字典中的下一个可能的单词
    private List<String> nextWord(String word, Set<String> dict) {
        List<String> result = new ArrayList<>();
        for (int i = 0; i < word.length(); i++) {
            for (char c = 'a'; c <='z'; c++) {
                if (c == word.charAt(i)) {
                    continue;
                }
                String newOne = replace(word, c, i);
                if (dict.contains(newOne)) {
                    result.add(newOne);
                }
            }
        }
        return result;
    }
    //nextWord中 判断两个单词是否只差一个字母
    private String replace(String word, char c, int i) {
        char[] array = word.toCharArray();
        array[i] = c;
        String result = new String(array);
        return result;
    }
}
