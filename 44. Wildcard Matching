# 2016-12-15
public class Solution {
    public boolean isMatch(String s, String p) {
        // write your code here
        int ids = 0; //s上的指针
        int idp = 0; //p上的指针
        int idstar = -1; //标记p循环中最临近的一个*
        int idmatch = 0; //标记s中和p中相匹配的位置
        while (ids < s.length()) {
            // 当两个指针指向完全相同的字符时，或者p中遇到的是?时
            if(idp < p.length() && (p.charAt(idp) == s.charAt(ids) || p.charAt(idp) == '?')) {
                ids++;
                idp++;
            // 如果字符不同也没有?，但在p中遇到是*时，我们记录下*的位置，但不改变s的指针    
            }else if (idp < p.length() && p.charAt(idp) == '*') {
                idstar = idp;
                idmatch = ids;
                idp++;
                //遇到*后，我们用idxmatch来记录*匹配到的s字符串的位置，和不用*匹配到的s字符串位置相区分
            
            // 如果字符不同也没有?，p指向的也不是*，但之前已经遇到*的话，我们可以从idxmatch继续匹配任意字符    
            }else if (idstar != -1){
                idp = idstar + 1;
                idmatch++;
                ids = idmatch;
            }else {
                return false;
            }
        }
        // 因为1个*能匹配无限序列，如果p末尾有多个*，我们都要跳过
        while(idp < p.length() && p.charAt(idp) == '*'){
            idp++;
        }
        // 如果p匹配完了，说明匹配成功
        return idp == p.length();
    }
}
