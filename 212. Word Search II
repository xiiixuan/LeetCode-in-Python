# 2016-09-12
public class Solution {
    public int[] dx = {0, 0, 1, -1};
    public int[] dy = {1, -1, 0, 0};
    public List<String> findWords(char[][] board, String[] words) {
        // write your code here
        List<String> result = new ArrayList<>();
        TrieTree dic = new TrieTree(new TrieNode());
        for (String word : words) {
            dic.insert(word);
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                search(board, i, j, result, dic.root);
            }
        }
        return result;
    }
    public void search(char[][] board, int x, int y, 
                    List<String> result, TrieNode root) {
        if (root.isString == true) {
            if (!result.contains(root.s)) {
                result.add(root.s);
            }
        }
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y] == 0 || root == null) {
            return;
        }
        if (root.subtree.containsKey(board[x][y])) {
            for (int i = 0; i < 4; i++) {
                char cur = board[x][y];
                board[x][y] = 0;
                search(board, x + dx[i], y + dy[i], result, root.subtree.get(cur));
                board[x][y] = cur;
            }
        }
    }
}
class TrieNode{
    String s;
    boolean isString;
    HashMap<Character, TrieNode> subtree;
    public TrieNode() {
        isString = false;
        s ="";
        subtree = new HashMap<Character, TrieNode>();
    }
}
class TrieTree {
    TrieNode root;
    public TrieTree(TrieNode node) {
        root = node;
    }
    public void insert(String word) {
        TrieNode now = root;
        for (int i = 0; i < word.length(); i++) {
            if(!now.subtree.containsKey(word.charAt(i))) {
                now.subtree.put(word.charAt(i), new TrieNode());
            }
            now = now.subtree.get(word.charAt(i));
        }
        now.s = word;
        now.isString = true;
    }
    public boolean find (String word) {
        TrieNode now = root;
        for (int i = 0; i < word.length(); i++) {
            if(!now.subtree.containsKey(word.charAt(i))) {
                return false;
            }
            now = now.subtree.get(word.charAt(i));
        }
        return now.isString;
    }
}
