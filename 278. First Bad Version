# 2016-02-28  Runtime: 44 ms
# Binary rearch
class Solution(object):
    def firstBadVersion(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n==0:
            return True
        start,end=1,n
        while start+1<end:
            m=(start+end)/2
            if isBadVersion(m) is True:
                end=m
            else:
                start=m
        if isBadVersion(start) is True:
            return start
        else:
            return end


//java
public class Solution {
    public int findMin(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int start = 0;
        int end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] > nums[end]) {
                start = mid;
            }else {
                end =mid;
            }
        }
        return Math.min(nums[start], nums[end]);
    }
}
