# 2016-09-01
public class Solution {
    public int maxCoins(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int n = nums.length;
        int[] A = new int[n+2];
        for (int i = 1; i <= n; i++){
        	A[i] = nums[i-1];
        }
        A[0] = 1;
        A[n+1] = 1;
        int[][] dp = new int[n + 2][n + 2];
        for (int i = 0; i < n + 2; i++) {
            dp[i][i] =  0;
        }
        for (int len = 1; len <= n; len++) { //气球串(数组)的长度
            for (int i = 1; i <= n + 1 - len; i++) {
                int j = i + len - 1;
                for (int k = i; k <= j; k++) {
                    int midValue = A[i - 1] * A[k] * A[j + 1];
                    dp[i][j] = Math.max(dp[i][k - 1] + dp[k + 1][j] + midValue, dp[i][j]);
                }
            }
        }
        
        return dp[1][n];
    }
}
