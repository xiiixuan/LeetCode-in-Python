# 2016-04-05
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        // write your code here
        if(intervals ==null || intervals.size()<=1)
            return intervals;
        Collections.sort(intervals,new IntervalComparator());
        Interval newone= intervals.get(0);

        List<Interval> result= new ArrayList<>();
        for(int i=1; i < intervals.size(); i++) {
            Interval cur=intervals.get(i);
            if(newone.end >= cur.start){
                newone.end = Math.max(newone.end, cur.end);
            }else{
                result.add(newone);
                newone=cur;
            }
        }
        result.add(newone);
        return result;
    }
    private class IntervalComparator implements Comparator<Interval> {
        public int compare(Interval a, Interval b) {
            return a.start - b.start;
        }

    }
}
