# 2016-08-31
public class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return nums[0];
        }
        return Math.max(robber(nums, 0, nums.length -2), robber(nums, 1, nums.length - 1));
        
    }
    public int robber(int[] A, int start, int end) {
        if (start == end) {
            return A[start];
        }
        if (start + 1 == end) {
            return Math.max(A[start], A[end]);
        }
    
        int[] f = new int[2];
        f[start % 2] = A[start];
        f[(start + 1) % 2] = Math.max(A[start], A[start + 1]);
        for (int i = start + 2; i <= end; i++) {
            f[i % 2] = Math.max(f[(i - 1) % 2], f[(i - 2) % 2] + A[i]);
        }
        return f[end % 2];
    }
    
}
