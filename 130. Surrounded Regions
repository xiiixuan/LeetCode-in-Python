# 2016-09-10
public class Solution {
    static final int[] dx = new int[] {0, 0, 1, -1};
    static final int[] dy = new int[] {1, -1, 0, 0};
    static final char Free = 'F';
    static final char Visited = 'V';
    public void solve(char[][] board) {
        // Write your code here
        if(board == null || board.length == 0) {
            return;
        }
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            bfs(board, i, 0);
            bfs(board, i, n - 1);
        }
        for (int j = 0; j < n; j++) {
            bfs(board, 0, j);
            bfs(board, m - 1, j);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if(board[i][j] == 'F') {
                    board[i][j] = 'O';
                }else if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
    public void bfs(char[][] board, int i, int j) {
        if (board[i][j] != 'O') {
            return;
        }
        Queue<Node> queue = new LinkedList<>();
        queue.offer(new Node(i, j));
        while (!queue.isEmpty()) {
            Node cur = queue.poll();
            board[cur.x][cur.y] = Free;
            for (Node node : surrounding(board, cur.x, cur.y)) {
                queue.offer(node);
            }
        }
    }
    //递归每个'O'点周围的所有'O'
    public List<Node> surrounding(char[][] board, int x, int y) {
        List<Node> result = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx >= 0 && nx < board.length && ny >= 0 && ny < board[0].length && board[nx][ny] == 'O') {
                board[nx][ny] = Visited;
                result.add(new Node(nx, ny));
            }
        }
        return result;
    }
}
class Node{
    int x;
    int y;
    Node(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
