# 2016-09-10
class TrieNode {
    // Initialize your data structure here.
    TrieNode[] child;
    boolean isWord;//判断字典树到此点的时候是不是一个单词；
    public TrieNode() {
        child = new TrieNode[26];
        isWord = false;
    }
    public void insert(String word, int index) {
        if(index == word.length()) {
            this.isWord = true;
            return;
        }
        int cur = word.charAt(index) - 'a';
        if(this.child[cur] == null) {
            this.child[cur] = new TrieNode();
        }
        child[cur].insert(word, index + 1);
    }
    public boolean search(String word, int index) {
        if (index == word.length()) {
            if(this.isWord == true) {
                return true;
            }else {
                return false;
            }
        }
        int cur = word.charAt(index) - 'a';
        if (this.child[cur] != null) {
            return child[cur].search(word, index + 1);
        }
        return false;
    }
    public boolean startsWith(String word, int index) {
        if (index == word.length()) {
            return true;
        }
        int cur = word.charAt(index) - 'a';
        if (this.child[cur] != null) {
            return child[cur].startsWith(word, index + 1);
        }
        return false;
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        root.insert(word, 0);
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        return root.search(word, 0);
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        return root.startsWith(prefix, 0);
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");
