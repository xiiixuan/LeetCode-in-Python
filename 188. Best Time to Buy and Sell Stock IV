# 2016-11-07
public class Solution {
    public int maxProfit(int k, int[] prices) {
        if (k == 0 || prices.length < 2) {
            return 0;
        }
        if (k >= prices.length / 2) {
            int profit = 0;
            for (int i = 0; i < prices.length - 1; i++) {
                if (prices[i + 1] > prices[i]) {
                    profit += prices[i + 1] - prices[i];
                }
            }
            return profit;
        }
        int[][] local = new int[prices.length][k + 1];
        int[][] global = new int[prices.length][k + 1];
        for (int i = 0; i <= k; i++) {
            local[0][i] = 0;
            global[0][i] = 0;
        }
        for (int i = 1; i < prices.length; i++) {
            local[i][0] = 0;
            for (int j = 1; j <= k; j++) {
                int diff = prices[i] - prices[i - 1];
                local[i][j] = Math.max(local[i-1][j] + diff, global[i-1][j-1]);
                global[i][j] = Math.max(local[i][j], global[i-1][j]);
            }
        }
        return global[prices.length - 1][k];
    }
}
