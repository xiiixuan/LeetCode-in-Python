# 2016-07-18
public class Solution {
    public List<List<String>> solveNQueens(int n) {
 
        List<List<String>> result = new ArrayList<>();
        List<Integer> A = new ArrayList<>();
        
        if (n <= 0) {
            return result;
        }
        
        helper(n, A, result);
        return result;
    }
    private void helper(int n, List<Integer> A, 
                        List<List<String>> result) {
        if (A.size() == n) {
            result.add(chessBoard(A));
            return;
        }
        for (int i = 0; i < n; i++) {
            if (!isValid(A, i)) {
                continue;
            }
            
            A.add(i);
            helper(n, A, result);
            A.remove(A.size() - 1);
        }
    }
    //表示判断根据目前情况，在棋盘中，第A.size()行， 第column列能不能放Queen
    private boolean isValid(List<Integer> A, int column) {
        int row = A.size();
        for (int i = 0; i < row; i++) {
            if (A.get(i) == column) {
                return false;
            }
            if (row - i == Math.abs(column - A.get(i))) {
                return false;
            }
        }
        return true;
    }
    
    private List<String> chessBoard(List<Integer> A) {
        List<String> result = new ArrayList<>();
        for (int i = 0; i< A.size(); i++) {
            String line = "";
            for (int j = 0; j < A.size(); j++) {
                if( A.get(i) == j) {
                    line += "Q";
                }else {
                    line += ".";
                }
            }
            result.add(line);
        }
        return result;
    }
}
