# 2016-02-28  Runtime: 112 ms  
# Binary search
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if matrix is None or len(matrix)==0:
            return 0
        m,n=len(matrix),len(matrix[0])
        num,a,b=0,m-1,0
        while 0<=a<m and 0<=b<n:
            result=matrix[a][b]
            if target>result:
                b+=1
            elif target<result:
                a-=1
            else:
                return True
        return False
        
//java
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        if (matrix == null || matrix.length == 0) {
            return false;
        }
        if (matrix[0] == null || matrix[0].length == 0) {
            return false;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int row = m - 1;
        int col = 0;
        while(row >= 0 && col < n) {
            if (matrix[row][col] == target) {
                return true;
            }else if (matrix[row][col] > target) {
                row--;
            }else {
                col++;
            }
        }
        return false;
    }
}
