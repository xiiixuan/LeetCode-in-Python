# 2016-10-28
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) {
            return "{}";
        }
        
        ArrayList<TreeNode> array = new ArrayList<>();
        array.add(root);
        for (int i=0; i < array.size(); i++) {
            TreeNode node = array.get(i);
            if (node == null) {
                continue;
            }
            array.add(node.left);
            array.add(node.right);
        }
        while (array.get(array.size()-1) == null) {
            array.remove(array.size()-1);
        }
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        sb.append(array.get(0).val);
        for(int i=1; i<array.size(); i++) {
            if (array.get(i) == null) {
                sb.append(",#");
            }else {
                sb.append(",");
                sb.append(array.get(i).val);
            }
        }
        sb.append("}");
        return sb.toString();
        
    }
    
    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    public TreeNode deserialize(String data) {
        // write your code here
        if (data=="{}") {
            return null;
        }
        
        boolean leftpart = true;
        int index = 0;
        String[] newdata = data.substring(1,data.length()-1).split(",");
        ArrayList<TreeNode> array = new ArrayList<>();
        TreeNode root = new TreeNode(Integer.parseInt(newdata[0]));
        array.add(root);
        for (int i=1; i < newdata.length; i++) {
            if (!newdata[i].equals("#")) {
                TreeNode node = new TreeNode(Integer.parseInt(newdata[i]));
                if (leftpart) {
                    array.get(index).left = node;
                }else {
                    array.get(index).right = node;
                }
                array.add(node);
            }
            if (!leftpart) {
                index++;
            }
            leftpart = !leftpart;
        }
        return root;
    }
}


// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
