# 2016-04-25
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void reorderList(ListNode head) {  
        // write your code here
        if (head == null || head.next == null) {
            return;
        }
        ListNode middle = findMiddle(head);
        ListNode rev =  reverse(middle.next);
        middle.next = null;
        merge(head, rev);
    }
    private ListNode findMiddle(ListNode head) {
        ListNode slow = head, fast = head.next;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }

    private ListNode reverse(ListNode head) {
        ListNode pre = null;
        while (head !=null) {
            ListNode temp =  head.next;
            head.next = pre;
            pre = head; 
            head = temp;
        }
        return pre;   
    }
    private void merge(ListNode node1, ListNode node2) {
        int index = 0;
        ListNode dummy  =  new ListNode(0);
        while (node1 != null && node2 != null) {
            if (index%2 ==0) {
                dummy.next =  node1;
                node1 = node1.next;
            }else {
                dummy.next =  node2;
                node2 = node2.next;
            }
            index++;
            dummy =  dummy.next;
        }
        if (node1 != null) {
            dummy.next = node1;
        }else if (node2 != null) {
            dummy.next = node2;
        }
    }
}
