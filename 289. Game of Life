# 2016-11-02
public class Solution {
    public void gameOfLife(int[][] board) {
        if (board == null || board.length == 0 || board[0] == null || board[0].length == 0) {
            return;
        }
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int num = findLive(board, i, j); //无论本轮什么状态，只需该当下一轮是活的情况 +10
                if (board[i][j] % 10 == 0) {
                    if (num == 3) {
                        //第二轮的情况存在十位上，本轮状态本身就在个位上，不能破坏
                        board[i][j] += 10;
                    }
                }else { 
                    if (num == 2 || num == 3) {
                        board[i][j] += 10;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = board[i][j] / 10;
            }
        }
    }
    //find the number of live cells around board[i][j]
    public int findLive(int[][] board, int x, int y) {
        int num = 0;
        for (int i = x - 1; i <= x + 1; i++) {
            for (int j = y - 1; j <= y + 1; j++) {
                if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || (i == x && j == y)) {
                    continue;
                }
                if (board[i][j] % 10 == 1) {
                    num++;
                }
            }
        }
        return num;
    }
}
