# 2016-07-18
public class Solution {
    public List<List<Integer>> combinationSum2(int[] num, int target) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        if (num == null || num.length == 0) {
            return result;
        }
        Arrays.sort(num);
        helper(num, target, 0, list, result, 0);
        return result;
    }
    private void helper(int[] candidates, int target, int index,
                       List<Integer> list, List<List<Integer>> result ,int sum) {
        if(sum == target) {
            //因为按此算法，list一定是升序，但会有重复，
            //比如[1,1,1], 2 
            //输出两个[1,1],其中第二个1，分别是数组中第二个和第三个1；
            //排除重复的即可
            if (!result.contains(list)) {
                result.add(new ArrayList<Integer>(list));
            }
            return;
        }
        
        for (int i = index; i < candidates.length; i++) {
            if (sum + candidates[i] > target) {
                break;
            }

            list.add(candidates[i]);
            sum += candidates[i];
            //i+1,让已经加进来的candidates[i],就不要再重复添加了;
            helper(candidates, target, i + 1, list, result, sum);
            list.remove(list.size() - 1);
            sum -= candidates[i];
        }
    }
}
